# This is a LIAM2 simulation file.

# This example introduces miscellaneous other basic features:
# (periodic) globals, macros, local variables in user-defined functions,
# the aggregate functions count and avg, the init phase and a few new arguments
# to built-in functions we have already seen.

# To run the simulation, press F6 if you are using the editor bundled with
# LIAM2, otherwise run the following command in a console:
# [BUNDLEPATH]\liam2\main run demo03.yml

# Globals are variables (aka. parameters) that do not relate to any particular
# entity (they can be used in expressions in any entity). Globals can be of two
# kinds: tables (with several fields) and multi-dimensional arrays and can be
# loaded either from the HDF5 input file, like in this example, or directly
# from .csv files. Periodic globals have the particularity that they have a
# (potentially) different value for each period.
globals:
    periodic:
        # retirement age for wage earners in Belgium will increase from 65
        # years old to 66 in 2025 and 67 in 2030
        - RETIREMENTAGE: int

entities:
    person:
        fields:
            # period and id are implicit
            - age:    int
            - gender: bool

            # fields not present in input
            - agegroup: {type: int, initialdata: False}

        # macros can be used to replace any expression. They are usually used
        # to avoid repeating expressions and make code more readable.
        # After being declared in the macros section, using the name of the
        # macro in any process of the entity becomes entirely equivalent to
        # using the macro expression.
        macros:
            ISMALE: gender
            ISFEMALE: not gender

            ACTIVEAGE: (age >= 15) and (age < RETIREMENTAGE)

        # possible transitions and regressions
        processes:
            ageing():
                - age: age + 1

                # juniors and plus50 are *local* variables. This means they are
                # only usable within the ageing function. As we have seen in the
                # previous example, the agegroup process below could just as
                # well be written using a single process (without using local
                # variables).
                - juniors: 5 * trunc(age / 5)
                - plus50: 10 * trunc(age / 10)
                - agegroup: if(age < 50, juniors, plus50)

            # * charts can be saved to files instead of being displayed
            #   interactively. The 'fname' and 'suffix' arguments of csv() also
            #   apply to all charting functions.
            chart_demography():
                - bar(groupby(agegroup, gender),
                      fname='demography_{period}.png')

            csv_output():
                # * dump is not limited to simple columns, it can evaluate any
                #   expression in-place
                # * the filter argument can be used to dump only a part of the
                #   population (in this case, the active population)
                # * the suffix argument can be used to customize the name of the
                #   csv file. When using this option, file names will have this
                #   pattern: <entity>_<period>_<suffix>.csv
                - csv(dump(id, 5 * trunc(age / 5), gender, filter=ACTIVEAGE),
                      suffix='active')

                # * groupby can also be saved to a csv file
                # * you can customize the filename more precisely (than with
                #   'suffix') by using the 'fname' argument, with the optional
                #   {entity} and {period} keywords. They are respectively
                #   replaced by the name of the entity and the current period.
                - csv(groupby(agegroup, gender),
                      fname='demography_{period}.csv')

                # we use the combination of a precise fname and mode='a'
                # ('a' is for append) so that we produce a single file for all
                # periods. Each period line is appended at the end of the file.
                - csv(period,
                      avg(age, filter=ISMALE), avg(age, filter=ISFEMALE),
                      avg(age),
                      fname='average_age.csv', mode='a')
                - csv(period, count(not ACTIVEAGE) / count(ACTIVEAGE),
                      fname='dependency_ratio.csv', mode='a')

            # * if a function is listed in the "init" section of the simulation
            #   block (see below), we call it an "init function". Those are
            #   normal functions (and can also be used as such) which are called
            #   only *once* in start_period - 1 (2015 in this case), instead of
            #   once per period.
            # * they can be used among others to initialize fields not present
            #   in the input dataset, like we will do in another demo model.
            # * they can also be used to add some fixed headers to files created
            #   progressively using "append".
            init_reports():
                - csv('period', 'men', 'women', 'total',
                      fname='average_age.csv')
                - csv('period', 'ratio', fname='dependency_ratio.csv')

simulation:
    # the functions listed in this section are only executed *once* in
    # start_period - 1 (that is 2015 in this case), instead of once per period.
    init:
        - person: [init_reports]

    processes:
        - person: [ageing, csv_output, chart_demography]

    input:
        file: demo.h5
    output:
        path: output
        file: simulation.h5

    # first simulated period
    start_period: 2016
    periods: 2
